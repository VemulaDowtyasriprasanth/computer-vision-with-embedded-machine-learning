"""
OpenMV DNN Static Image Feature Test

Copy trained .tflite model and labels.txt to the SD card from Edge Impulse
project. Copy feature set from test sample from Edge Impulse project.

Author: EdgeImpulse, Inc.
Date: June 8, 2021
License: Apache-2.0 (apache.org/licenses/LICENSE-2.0)
"""

import image, time, tf

# Settings
model_file = "trained.tflite"
labels_file = "labels.txt"
img_color = 2                       # sensor.GRAYSCALE is 2

# Copy in features from test sample in Edge Impulse
features = [0.6118, 0.6118, 0.6118, 0.6157, 0.6157, 0.6157, 0.6266, 0.6275, 0.6314, 0.6314, 0.6353, 0.6353, 0.6353, 0.6392, 0.6392, 0.6367, 0.6322, 0.6322, 0.6322, 0.6314, 0.6276, 0.6314, 0.6314, 0.6314, 0.6283, 0.6283, 0.6283, 0.6283, 0.6078, 0.6118, 0.6118, 0.6157, 0.6182, 0.6198, 0.6266, 0.6283, 0.6314, 0.6317, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6358, 0.6392, 0.6392, 0.6392, 0.6378, 0.6378, 0.6378, 0.6344, 0.6314, 0.6314, 0.6314, 0.6314, 0.6314, 0.6084, 0.6118, 0.6157, 0.6157, 0.6227, 0.6275, 0.6305, 0.6314, 0.6339, 0.6353, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6392, 0.6369, 0.6353, 0.6353, 0.6353, 0.6392, 0.6353, 0.6087, 0.6118, 0.6157, 0.6157, 0.6176, 0.6275, 0.6305, 0.6338, 0.6373, 0.6353, 0.6402, 0.6431, 0.6431, 0.6431, 0.6431, 0.6412, 0.6412, 0.6412, 0.6412, 0.6392, 0.6392, 0.6392, 0.6392, 0.6373, 0.6353, 0.6391, 0.6392, 0.6377, 0.6048, 0.6118, 0.6159, 0.6251, 0.6272, 0.6311, 0.6314, 0.6353, 0.6392, 0.6392, 0.6430, 0.6543, 0.6546, 0.6515, 0.6431, 0.6431, 0.6431, 0.6431, 0.6431, 0.6392, 0.6429, 0.6431, 0.6431, 0.6431, 0.6392, 0.6392, 0.6392, 0.6390, 0.6048, 0.6118, 0.6184, 0.6268, 0.6275, 0.6314, 0.6314, 0.6392, 0.6401, 0.6406, 0.6431, 0.6624, 0.6667, 0.6667, 0.6518, 0.6530, 0.6577, 0.6490, 0.6471, 0.6431, 0.6445, 0.6485, 0.6445, 0.6431, 0.6419, 0.6431, 0.6431, 0.6431, 0.6109, 0.6118, 0.6157, 0.6255, 0.6275, 0.6314, 0.6320, 0.6392, 0.6420, 0.6431, 0.6486, 0.6506, 0.6409, 0.6444, 0.6494, 0.6465, 0.6502, 0.6595, 0.6582, 0.6611, 0.6619, 0.6627, 0.6549, 0.6431, 0.6431, 0.6468, 0.6580, 0.6471, 0.6078, 0.6118, 0.6190, 0.6246, 0.6188, 0.6266, 0.6235, 0.6161, 0.6070, 0.6019, 0.4964, 0.3521, 0.3115, 0.3213, 0.3819, 0.4538, 0.5371, 0.6211, 0.6598, 0.6667, 0.6667, 0.6665, 0.6594, 0.6431, 0.6410, 0.6426, 0.5815, 0.5738, 0.6039, 0.6078, 0.6118, 0.6118, 0.6133, 0.6132, 0.5947, 0.5460, 0.4764, 0.3654, 0.2416, 0.2569, 0.2854, 0.2978, 0.3087, 0.3236, 0.3272, 0.3473, 0.4754, 0.6395, 0.6697, 0.6686, 0.6547, 0.6100, 0.4798, 0.3313, 0.3145, 0.4633, 0.5958, 0.5997, 0.6003, 0.6056, 0.6117, 0.6047, 0.5449, 0.4264, 0.2812, 0.2266, 0.2235, 0.2661, 0.3025, 0.3249, 0.3298, 0.3361, 0.3415, 0.3415, 0.3375, 0.4148, 0.5176, 0.6341, 0.6387, 0.4886, 0.2714, 0.2010, 0.3370, 0.3440, 0.5852, 0.5954, 0.5961, 0.5961, 0.6076, 0.5905, 0.4873, 0.2936, 0.1853, 0.2098, 0.2275, 0.2716, 0.3087, 0.3345, 0.3420, 0.3490, 0.3510, 0.3549, 0.3511, 0.3536, 0.3699, 0.4786, 0.4965, 0.3381, 0.2902, 0.3424, 0.6321, 0.6366, 0.5852, 0.5961, 0.5958, 0.5978, 0.6115, 0.5799, 0.4478, 0.2022, 0.1773, 0.2039, 0.2256, 0.2736, 0.3064, 0.3364, 0.3459, 0.3490, 0.3532, 0.3569, 0.3535, 0.3493, 0.3590, 0.3384, 0.3469, 0.4075, 0.4532, 0.5994, 0.6732, 0.6667, 0.5846, 0.5899, 0.5964, 0.6039, 0.6078, 0.5706, 0.4174, 0.1611, 0.1725, 0.1951, 0.2268, 0.2736, 0.3087, 0.3361, 0.3451, 0.3451, 0.3476, 0.3490, 0.3490, 0.3518, 0.5108, 0.5456, 0.5579, 0.5970, 0.6532, 0.6665, 0.6667, 0.6667, 0.5812, 0.5843, 0.5893, 0.5980, 0.6039, 0.5557, 0.3861, 0.1440, 0.1695, 0.1888, 0.2216, 0.2695, 0.3062, 0.3356, 0.3420, 0.3420, 0.3451, 0.3486, 0.3490, 0.3507, 0.6056, 0.6776, 0.6737, 0.6687, 0.6662, 0.6667, 0.6667, 0.6667, 0.5765, 0.5759, 0.5798, 0.5917, 0.5992, 0.5585, 0.3774, 0.1361, 0.1655, 0.1887, 0.2172, 0.2618, 0.3087, 0.3364, 0.3451, 0.3412, 0.3420, 0.3451, 0.3451, 0.3546, 0.6048, 0.6745, 0.6740, 0.6706, 0.6667, 0.6703, 0.6667, 0.6667, 0.5700, 0.5700, 0.5765, 0.5838, 0.5936, 0.5524, 0.3728, 0.1361, 0.1625, 0.1846, 0.2137, 0.2591, 0.3149, 0.3608, 0.3476, 0.3476, 0.3451, 0.3451, 0.3451, 0.3546, 0.5913, 0.6745, 0.6736, 0.6706, 0.6706, 0.6667, 0.6667, 0.6627, 0.5683, 0.5686, 0.5723, 0.5784, 0.5840, 0.5462, 0.3857, 0.1386, 0.1507, 0.1840, 0.2056, 0.2574, 0.3406, 0.5324, 0.4293, 0.3547, 0.3577, 0.3556, 0.3493, 0.3532, 0.5667, 0.6745, 0.6709, 0.6706, 0.6668, 0.6667, 0.6664, 0.6664, 0.5632, 0.5672, 0.5688, 0.5755, 0.5804, 0.5598, 0.4405, 0.1542, 0.1332, 0.1824, 0.1980, 0.2479, 0.3057, 0.4599, 0.4455, 0.3549, 0.3769, 0.3971, 0.4108, 0.3595, 0.5395, 0.6784, 0.6745, 0.6706, 0.6676, 0.6667, 0.6627, 0.6627, 0.5616, 0.5647, 0.5686, 0.5707, 0.5765, 0.5709, 0.4906, 0.2099, 0.1202, 0.1846, 0.1961, 0.2305, 0.2832, 0.3139, 0.3266, 0.3364, 0.3499, 0.3661, 0.4146, 0.3730, 0.4786, 0.6792, 0.6783, 0.6742, 0.6706, 0.6667, 0.6667, 0.6636, 0.5496, 0.5633, 0.5686, 0.5725, 0.5762, 0.5804, 0.5543, 0.3530, 0.1323, 0.1660, 0.2048, 0.2267, 0.2681, 0.2910, 0.3048, 0.3114, 0.3204, 0.3300, 0.3398, 0.3499, 0.3592, 0.4540, 0.4944, 0.5217, 0.5616, 0.6328, 0.6565, 0.6624, 0.5499, 0.5647, 0.5688, 0.5721, 0.5756, 0.5804, 0.5797, 0.5243, 0.3101, 0.1550, 0.2091, 0.2451, 0.2678, 0.2885, 0.2995, 0.3020, 0.3101, 0.3165, 0.3328, 0.3490, 0.3427, 0.3538, 0.3334, 0.3041, 0.4368, 0.5646, 0.6170, 0.6510, 0.5499, 0.5647, 0.5725, 0.5765, 0.5804, 0.5852, 0.5922, 0.5995, 0.5551, 0.4484, 0.3517, 0.3382, 0.3498, 0.3473, 0.3426, 0.3387, 0.3477, 0.3690, 0.3896, 0.4135, 0.4441, 0.4836, 0.4779, 0.3397, 0.2812, 0.5148, 0.6232, 0.6559, 0.5470, 0.5608, 0.5686, 0.5745, 0.5842, 0.5952, 0.6000, 0.6087, 0.6182, 0.6229, 0.5986, 0.5886, 0.5877, 0.5857, 0.5787, 0.5728, 0.5716, 0.5961, 0.6218, 0.6364, 0.6560, 0.6636, 0.6521, 0.5572, 0.2754, 0.3042, 0.6071, 0.6154, 0.5451, 0.5515, 0.5650, 0.5706, 0.5913, 0.5961, 0.6000, 0.6115, 0.6218, 0.6311, 0.6314, 0.6316, 0.6444, 0.6468, 0.6471, 0.6535, 0.6627, 0.6667, 0.6703, 0.6692, 0.6667, 0.6667, 0.6579, 0.6379, 0.4206, 0.2492, 0.4305, 0.5393, 0.5401, 0.5476, 0.5647, 0.5696, 0.5821, 0.5948, 0.5996, 0.6087, 0.6143, 0.6218, 0.6275, 0.6350, 0.6419, 0.6431, 0.6451, 0.6515, 0.6609, 0.6647, 0.6647, 0.6647, 0.6647, 0.6627, 0.6627, 0.6487, 0.6098, 0.3878, 0.2562, 0.3825, 0.5342, 0.5476, 0.5647, 0.5686, 0.5767, 0.5860, 0.5955, 0.6048, 0.6118, 0.6160, 0.6275, 0.6314, 0.6369, 0.6395, 0.6431, 0.6431, 0.6510, 0.6552, 0.6591, 0.6627, 0.6627, 0.6627, 0.6627, 0.6622, 0.6564, 0.6452, 0.5939, 0.5356, 0.5232, 0.5428, 0.5518, 0.5640, 0.5724, 0.5795, 0.5843, 0.5969, 0.6073, 0.6119, 0.6202, 0.6298, 0.6323, 0.6373, 0.6392, 0.6417, 0.6417, 0.6431, 0.6532, 0.6618, 0.6613, 0.6627, 0.6627, 0.6627, 0.6613, 0.6653, 0.6667, 0.6630, 0.5232, 0.5378, 0.5452, 0.5518, 0.5652, 0.5748, 0.5811, 0.5893, 0.6028, 0.6048, 0.6087, 0.6160, 0.6255, 0.6314, 0.6353, 0.6353, 0.6353, 0.6353, 0.6400, 0.6482, 0.6472, 0.6472, 0.6448, 0.6479, 0.6475, 0.6625, 0.6636, 0.6636]

# Print something to the console
print()
print("---Static Features Inference Test---")

# Extract labels from labels file
labels = [line.rstrip('\n').rstrip('\r') for line in open(labels_file)]
print("Labels:", labels)

# Create blank image (OpenMV tf library expects image object as input)
img = image.Image(len(features), 1, img_color)

# Fill image "pixels" with our data
for i, s in enumerate(features):

    # OpenMV tf library does not work with floating point values, so we need to
    # re-quantize the pixels to their 8-bit values (0..255)
    pixel_val = s * 255
    if pixel_val < 0:
        pixel_val = 0
    elif pixel_val > 255:
        pixel_val = 255

    # Set pixel values in image container
    img.set_pixel(i, 0, int(pixel_val))

# Run inference. OpenMV tf classify returns a list of prediction objects. Time
# how long it takes to perform inference.
start_time = time.time_ns()
objs = tf.classify(model_file, img)
elapsed_time = time.time_ns() - start_time

# We should only get one item in the predictions list, so we extract the
# output values from that and print them.
predictions = objs[0].output()
print("Predictions:", predictions)

# Print out how long it took to perform inference
print("Inference time:", (elapsed_time / 1000000), "ms")

# Print a newline
print()
